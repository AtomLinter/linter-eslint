"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getNodePrefixPath = getNodePrefixPath;
exports.findESLintDirectory = findESLintDirectory;
exports.getESLintFromDirectory = getESLintFromDirectory;
exports.refreshModulesPath = refreshModulesPath;
exports.getESLintInstance = getESLintInstance;
exports.log = log;
exports.getConfigForFile = getConfigForFile;
exports.getRelativePath = getRelativePath;
exports.getCLIEngineOptions = getCLIEngineOptions;
exports.getRules = getRules;
exports.didRulesChange = didRulesChange;

var _path = _interopRequireDefault(require("path"));

var _util = _interopRequireDefault(require("util"));

var _fsPlus = _interopRequireDefault(require("fs-plus"));

var _child_process = _interopRequireDefault(require("child_process"));

var _resolveEnv = _interopRequireDefault(require("resolve-env"));

var _atomLinter = require("atom-linter");

var _consistentPath = _interopRequireDefault(require("consistent-path"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* global emit */
const Cache = {
  ESLINT_LOCAL_PATH: _path.default.normalize(_path.default.join(__dirname, '..', 'node_modules', 'eslint')),
  NODE_PREFIX_PATH: null,
  LAST_MODULES_PATH: null
};
/**
 * Takes a path and translates `~` to the user's home directory, and replaces
 * all environment variables with their value.
 * @param  {string} path The path to remove "strangeness" from
 * @return {string}      The cleaned path
 */

const cleanPath = path => path ? (0, _resolveEnv.default)(_fsPlus.default.normalize(path)) : '';
/**
 * @returns {string}
 */


function getNodePrefixPath() {
  if (Cache.NODE_PREFIX_PATH === null) {
    const npmCommand = process.platform === 'win32' ? 'npm.cmd' : 'npm';

    try {
      Cache.NODE_PREFIX_PATH = _child_process.default.spawnSync(npmCommand, ['get', 'prefix'], {
        env: Object.assign(Object.assign({}, process.env), {
          PATH: (0, _consistentPath.default)()
        })
      }).output[1].toString().trim();
    } catch (e) {
      const errMsg = 'Unable to execute `npm get prefix`. Please make sure ' + 'Atom is getting $PATH correctly.';
      throw new Error(errMsg);
    }
  }

  return Cache.NODE_PREFIX_PATH;
}
/**
 * @param {string} dirPath
 * @returns {boolean}
 */


function isDirectory(dirPath) {
  let isDir;

  try {
    isDir = _fsPlus.default.statSync(dirPath).isDirectory();
  } catch (e) {
    isDir = false;
  }

  return isDir;
}

let fallbackForGlobalErrorThrown = false;
/**
 * @param {string} modulesDir
 * @param {object} config
 * @param {string} projectPath
 * @param {boolean} fallbackForGlobal
 * @returns {{ path: string, type: 'local project' | 'global' | 'advanced specified' | 'bundled fallback' }}
 */

function findESLintDirectory(modulesDir, config, projectPath, fallbackForGlobal = false) {
  let eslintDir = null;
  let locationType = null;

  if (config.global.useGlobalEslint && !fallbackForGlobal) {
    locationType = 'global';
    const configGlobal = cleanPath(config.global.globalNodePath);
    const prefixPath = configGlobal || getNodePrefixPath(); // NPM on Windows and Yarn on all platforms

    eslintDir = _path.default.join(prefixPath, 'node_modules', 'eslint');

    if (!isDirectory(eslintDir)) {
      // NPM on platforms other than Windows
      eslintDir = _path.default.join(prefixPath, 'lib', 'node_modules', 'eslint');
    }
  } else if (!config.advanced.localNodeModules) {
    locationType = 'local project';
    eslintDir = _path.default.join(modulesDir || '', 'eslint');
  } else if (_path.default.isAbsolute(cleanPath(config.advanced.localNodeModules))) {
    locationType = 'advanced specified';
    eslintDir = _path.default.join(cleanPath(config.advanced.localNodeModules), 'eslint');
  } else {
    locationType = 'advanced specified';
    eslintDir = _path.default.join(projectPath || '', cleanPath(config.advanced.localNodeModules), 'eslint');
  }

  if (isDirectory(eslintDir)) {
    return {
      path: eslintDir,
      type: locationType
    };
  }

  if (config.global.useGlobalEslint && !fallbackForGlobal) {
    if (!fallbackForGlobalErrorThrown) {
      // Throw the error only once to prevent performance issues
      fallbackForGlobalErrorThrown = true;
      console.error(`Global ESLint is not found, falling back to other Eslint installations...
        Please ensure the global Node path is set correctly.
        If you wanted to use a local installation of Eslint, disable Global Eslint option in the linter-eslint config.`);
    }

    return findESLintDirectory(modulesDir, config, projectPath, true);
  }

  return {
    path: Cache.ESLINT_LOCAL_PATH,
    type: 'bundled fallback'
  };
}
/**
 * @param {string} modulesDir
 * @param {object} config
 * @param {string} projectPath
 * @returns {import("eslint")}
 */


function getESLintFromDirectory(modulesDir, config, projectPath) {
  const {
    path: ESLintDirectory
  } = findESLintDirectory(modulesDir, config, projectPath);

  try {
    // eslint-disable-next-line import/no-dynamic-require
    return require(ESLintDirectory);
  } catch (e) {
    if (config.global.useGlobalEslint && e.code === 'MODULE_NOT_FOUND') {
      throw new Error('ESLint not found, try restarting Atom to clear caches.');
    } // eslint-disable-next-line import/no-dynamic-require


    return require(Cache.ESLINT_LOCAL_PATH);
  }
}
/**
 * @param {string} modulesDir
 */


function refreshModulesPath(modulesDir) {
  if (Cache.LAST_MODULES_PATH !== modulesDir) {
    Cache.LAST_MODULES_PATH = modulesDir;
    process.env.NODE_PATH = modulesDir || ''; // eslint-disable-next-line no-underscore-dangle

    require('module').Module._initPaths();
  }
} // export async function getESLintBinary(rootPath) {
//   const platform = process.platform;
//   if (platform === 'win32' && await fs.exists(Path.join(rootPath, 'node_modules', '.bin', 'eslint.cmd'))) {
//     return Path.join('.', 'node_modules', '.bin', 'eslint.cmd');
//   } else if ((platform === 'linux' || platform === 'darwin')
//     && await fs.exists(Path.join(rootPath, 'node_modules', '.bin', 'eslint'))) {
//     return Path.join('.', 'node_modules', '.bin', 'eslint');
//   } else {
//     return 'eslint';
//   }
// }

/**
 * @param {string} fileDir
 * @param {object} config
 * @param {string} projectPath
 * @returns {import("eslint")}
 */


function getESLintInstance(fileDir, config, projectPath) {
  const modulesDir = _path.default.dirname((0, _atomLinter.findCached)(fileDir, 'node_modules/eslint') || '');

  refreshModulesPath(modulesDir);
  return getESLintFromDirectory(modulesDir, config, projectPath);
}
/**
 * console.log
 * @param  {any} args
 * @return {void}
 */


function log(...args) {
  const obj = args.length === 1 ? args[0] : args;
  let str;

  try {
    str = JSON.stringify(obj);
  } catch (e) {
    str = _util.default.inspect(obj);
  }

  emit('log', str);
}
/**
 * @param {import("eslint")} eslint
 * @param {string} filePath
 */


function getConfigForFile(eslint, filePath) {
  const cli = new eslint.CLIEngine();

  try {
    return cli.getConfigForFile(filePath);
  } catch (e) {
    // No configuration was found
    return null;
  }
}
/**
 * @param {string} fileDir
 * @param {string} filePath
 * @param {object} config
 * @param {string} projectPath
 * @returns {string}
 */


function getRelativePath(fileDir, filePath, config, projectPath) {
  const ignoreFile = config.advanced.disableEslintIgnore ? null : (0, _atomLinter.findCached)(fileDir, '.eslintignore'); // If we can find an .eslintignore file, we can set cwd there
  // (because they are expected to be at the project root)

  if (ignoreFile) {
    const ignoreDir = _path.default.dirname(ignoreFile);

    process.chdir(ignoreDir);
    return _path.default.relative(ignoreDir, filePath);
  } // Otherwise, we'll set the cwd to the atom project root as long as that exists


  if (projectPath) {
    process.chdir(projectPath);
    return _path.default.relative(projectPath, filePath);
  } // If all else fails, use the file location itself


  process.chdir(fileDir);
  return _path.default.basename(filePath);
}
/**
 * @param {string} type
 * @param {string[]} rules
 * @param {object} config
 * @param {string} filePath
 * @param {object} fileConfig
 */


function getCLIEngineOptions(type, config, rules, filePath, fileConfig) {
  const cliEngineConfig = {
    rules,
    ignore: !config.advanced.disableEslintIgnore,
    fix: type === 'fix'
  };
  cliEngineConfig.rulePaths = config.advanced.eslintRulesDirs.map(path => {
    const rulesDir = cleanPath(path);

    if (!_path.default.isAbsolute(rulesDir)) {
      return (0, _atomLinter.findCached)(_path.default.dirname(filePath), rulesDir);
    }

    return rulesDir;
  }).filter(path => path);

  if (fileConfig === null && config.global.eslintrcPath) {
    // If we didn't find a configuration use the fallback from the settings
    cliEngineConfig.configFile = cleanPath(config.global.eslintrcPath);
  }

  return cliEngineConfig;
}
/**
 * Gets the list of rules used for a lint job
 * @param  {import("eslint").CLIEngine} cliEngine The CLIEngine instance used for the lint job
 * @return {Map}              A Map of the rules used, rule names as keys, rule
 *                            properties as the contents.
 */


function getRules(cliEngine) {
  // Pull the list of rules used directly from the CLIEngine
  if (typeof cliEngine.getRules === 'function') {
    return cliEngine.getRules();
  } // Attempt to use the internal (undocumented) `linter` instance attached to
  // the CLIEngine to get the loaded rules (including plugin rules).
  // Added in ESLint v4


  if (Object.prototype.hasOwnProperty.call(cliEngine, 'linter')) {
    return cliEngine.linter.getRules();
  } // Older versions of ESLint don't (easily) support getting a list of rules


  return new Map();
}
/**
 * Given an exiting rule list and a new rule list, determines whether there
 * have been changes.
 * NOTE: This only accounts for presence of the rules, changes to their metadata
 * are not taken into account.
 * @param  {Map} newRules     A Map of the new rules
 * @param  {Map} currentRules A Map of the current rules
 * @return {boolean}             Whether or not there were changes
 */


function didRulesChange(currentRules, newRules) {
  return !(currentRules.size === newRules.size && Array.from(currentRules.keys()).every(ruleId => newRules.has(ruleId)));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,